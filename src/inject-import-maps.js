import path from 'path'
import { writeFile } from 'fs/promises'
const { resolve } = path
const importMapAttributePattern = /<(script)(?:\s+[^>]*?)*?\s+(data-import-map=["']([^"']*)["']|data-import-map=['"]([^'"]*)['"]).*?>(.*?)<\/\1>/gis
const importMapCommentPattern = /<!--(?:\s+[^>]*?)?import-map-start:\s*([^\s]+)\s*-->(.*?)(<!--\s*import-map-end:\s*([^\s]+)\s*-->)/gs
const scriptContentPattern = /(<script(?:\s+[^>]*?)?>)[^<]*(<\/script>)/gis

/*
- html        - s - String of file containing HTML for import-map to be injected into
- importMaps  - o - Map: Import map paths (s) vs import-map JSON content (s) */
const injectDataImportMaps = (html, importMaps) => {
  const matches = html.replace(importMapAttributePattern, (match, p1, p2, p3, p4,p5, p6) => {
    // console.log(p6)
    const first = html.slice(0,p6)
    const spaceCount = p6 - first.lastIndexOf('\n') - 1
    const newContent = `
${' '.repeat(spaceCount)}  ${importMaps.get(p3).replaceAll('\n', '\n  ' + ' '.repeat(spaceCount))}
${' '.repeat(spaceCount)}`

    return match.replace(scriptContentPattern, `$1${newContent}$2`)
  })

  return matches
}

/*
- html        - s - String of file containing HTML for import-map to be injected into
- importMaps  - o - Map: Import map paths (s) vs import-map JSON content (s) */
const injectImportMapComments = (html, importMaps) => {
  return html.replaceAll(importMapCommentPattern, (match, p1,a,b,c,d) => {
    const indexOfMatch = html.indexOf(match)

    // console.log('indexOfMatch',indexOfMatch,d)

    const first = html.slice(0,d)
    // console.log('first.lastIndexOf()', d - first.lastIndexOf('\n'))
    const spaceCount = d - first.lastIndexOf('\n') - 1

    return `<!-- *** Generated by Bontia; DO NOT EDIT *** import-map-start: ${p1} -->
${' '.repeat(spaceCount)}<script type="importmap">
${' '.repeat(spaceCount)}  ${importMaps.get(p1).replaceAll('\n', '\n  ' + ' '.repeat(spaceCount))}
${' '.repeat(spaceCount)}</script>
${' '.repeat(spaceCount)}<!-- import-map-end: ${p1} -->`
  })
}
// ${importMaps.get(p1).replaceAll('\n', '\n' + ' '.repeat(spaceCount))}
/*
- html        - s - String of file containing HTML for import-map to be injected into
- htmlPath    - s
- importMaps  - o - Map: Import map paths (s) vs import-map JSON content (s)
- cliDir      - s - Directory defined by the cli command */
const injectImportMaps = (html, htmlPath, importMaps, cliDir) => {
  const htmlWithDataImportMaps = injectDataImportMaps(html, importMaps)
  const newHTML = injectImportMapComments(htmlWithDataImportMaps, importMaps)

  const injectablePath = resolve(cliDir, htmlPath)
  // console.log(newHTML)
  writeFile(injectablePath, newHTML, (err) => {
    if (err) {
      console.error(err)
      return
    }
    console.log(`- Wrote to ${injectablePath}`)
  })
}

export { injectImportMaps }
